# -*- coding: utf-8 -*-
"""movie_recommend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H9f2JotjUb_IDzaL4vN0exVj8X8THyw4
"""

import pandas as pd
import numpy as np

movies = pd.read_csv("app/pydata/tmdb_5000_movies.csv")
credits = pd.read_csv("app/pydata/tmdb_5000_credits.csv")

df = movies.merge(credits, on="title")

df=df[["movie_id","title","overview","genres","keywords","cast","crew"]]
df.head(1)

df.isnull().sum()

df.dropna(inplace=True)

# Getting Genres["name"] from this function
import ast

def convert(obj):
    L=[]
    for i in ast.literal_eval(obj):
        L.append(i["name"])
    return L

df["genres"] = df["genres"].apply(convert)

df["keywords"] = df["keywords"].apply(convert)

# Getting Top 3 charecters in cast feature from this function
def convert2(obj):
    L=[]
    counter = 0
    for i in ast.literal_eval(obj):
        if counter!=3:
            L.append(i["name"])
            counter+=1
        else:
            break
    return L

df["cast"] = df["cast"].apply(convert2)

# Getting Crew["Director"] names from this function
def fetch(obj):
    L =[]
    for i in ast.literal_eval(obj):
        if i["job"] == "Director":
            L.append(i["name"])
            break
    return L

df["crew"] = df["crew"].apply(fetch)

df["overview"] = df["overview"].apply(lambda x:x.split())

# Removing " " (spaces) between Words from features
df["cast"] = df["cast"].apply(lambda x:[i.replace(" ","") for i in x])
df["crew"] = df["crew"].apply(lambda x:[i.replace(" ","") for i in x])
df["keywords"] = df["keywords"].apply(lambda x:[i.replace(" ","") for i in x])
df["genres"] = df["genres"].apply(lambda x:[i.replace(" ","") for i in x])

df["tags"] = df["overview"] + df["genres"] + df["keywords"] + df["cast"] + df["crew"]

# new_df data is ready now!!!
new_df = df[["movie_id", "title", "tags"]]

new_df["tags"] = new_df["tags"].apply(lambda x:" ".join(x))
new_df["tags"] = new_df["tags"].apply(lambda x:x.lower())

new_df.head(1)

# Poreter Stemmer for handeling repeated words in tags feature
import nltk
from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
    y=[]
    for i in text.split():
        y.append(ps.stem(i))

    return " ".join(y)

new_df["tags"] = new_df["tags"].apply(stem)

# Vectorization: Creating each movie as a Vector
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000, stop_words="english")

vector = cv.fit_transform(new_df["tags"]).toarray()

# Calculating Cosine Angle between vectors
from sklearn.metrics.pairwise import cosine_similarity
similar = cosine_similarity(vector)

# Creating our Recommend function it will return Top 5 movies back
def recommend(movie):
    movie_index = new_df[new_df["title"]==movie].index[0]
    distances = similar[movie_index]
    movie_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

    for i in movie_list:
        print(new_df.iloc[i[0]].title)

recommend("Batman Begins")

#import pickle

#pickle.dump(new_df.to_dict(), open("movies.pkl", "wb"))

#pickle.dump(similar,open("similar.pkl","wb"))

